"use strict";(self.webpackChunkstreams_docs=self.webpackChunkstreams_docs||[]).push([[8267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?o.createElement(g,i(i({ref:t},p),{},{components:n})):o.createElement(g,i({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},i="Downloads",l={unversionedId:"mobile-sdk/react-native-sdk/downloads",id:"mobile-sdk/react-native-sdk/downloads",title:"Downloads",description:"The React Native TPStreams SDK provides comprehensive download functionality for offline video playback. This includes managing downloads, tracking progress, and handling download states.",source:"@site/docs/mobile-sdk/react-native-sdk/downloads.md",sourceDirName:"mobile-sdk/react-native-sdk",slug:"/mobile-sdk/react-native-sdk/downloads",permalink:"/docs/mobile-sdk/react-native-sdk/downloads",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mobileSdk",previous:{title:"Player Events",permalink:"/docs/mobile-sdk/react-native-sdk/player-events"}},s={},d=[{value:"Download Methods",id:"download-methods",level:2},{value:"Basic Download Operations",id:"basic-download-operations",level:3},{value:"Download Status Methods",id:"download-status-methods",level:3},{value:"Real-time Download Progress",id:"real-time-download-progress",level:2},{value:"Progress Listener Methods",id:"progress-listener-methods",level:3},{value:"Progress Listener Types",id:"progress-listener-types",level:3},{value:"Download Item",id:"download-item",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"downloads"},"Downloads"),(0,a.kt)("p",null,"The React Native TPStreams SDK provides comprehensive download functionality for offline video playback. This includes managing downloads, tracking progress, and handling download states."),(0,a.kt)("h2",{id:"download-methods"},"Download Methods"),(0,a.kt)("h3",{id:"basic-download-operations"},"Basic Download Operations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"pauseDownload(videoId: string)"),": Pauses an ongoing download. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<void>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"resumeDownload(videoId: string)"),": Resumes a paused download. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<void>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"removeDownload(videoId: string)"),": Removes a downloaded video. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<void>"),".")),(0,a.kt)("h3",{id:"download-status-methods"},"Download Status Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"isDownloaded(videoId: string)"),": Checks if a video has been downloaded. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<boolean>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"isDownloading(videoId: string)"),": Checks if a video is currently downloading. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<boolean>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"isPaused(videoId: string)"),": Checks if a video download is paused. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<boolean>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getDownloadStatus(videoId: string)"),": Gets the download status of a video as a descriptive string. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<string>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getAllDownloads()"),": Gets all downloaded videos. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<DownloadItem[]>"),".")),(0,a.kt)("h2",{id:"real-time-download-progress"},"Real-time Download Progress"),(0,a.kt)("p",null,"The library provides real-time download progress updates for optimal performance:"),(0,a.kt)("h3",{id:"progress-listener-methods"},"Progress Listener Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"addDownloadProgressListener()"),": Starts listening for download progress updates. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<void>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"removeDownloadProgressListener()"),": Stops listening for download progress updates. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise<void>"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"onDownloadProgressChanged(listener: DownloadProgressListener)"),": Adds a listener for progress changes. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"EmitterSubscription"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"onDownloadStateChanged(listener: DownloadStateChangeListener)"),": Adds a listener for download state changes. Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"EmitterSubscription"),".")),(0,a.kt)("h3",{id:"progress-listener-types"},"Progress Listener Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type DownloadProgressListener = (downloads: DownloadItem[]) => void;\n\ntype DownloadStateChangeListener = (downloadItem: DownloadItem, error: DownloadError | null) => void;\n\ntype DownloadError = {\n  message: string;\n  code: number;\n  type: string;\n};\n")),(0,a.kt)("h2",{id:"download-item"},"Download Item"),(0,a.kt)("p",null,"The download item object (",(0,a.kt)("strong",{parentName:"p"},"DownloadItem"),") contains information about a downloaded or downloading video:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"videoId"),": The ID of the video."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"title"),": The title of the video."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"thumbnailUrl"),": URL to the video thumbnail (if available)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"totalBytes"),": Total size of the video in bytes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"downloadedBytes"),": Number of bytes downloaded so far."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"progressPercentage"),": Download progress from 0 to 100."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"state"),": The current state of the download as String (Queued, Downloading, Completed, Failed, Removing, Restarting, Paused)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"metadata"),": Custom metadata attached to the download as a JSON string (if provided during download).")))}m.isMDXComponent=!0}}]);