"use strict";(self.webpackChunkstreams_docs=self.webpackChunkstreams_docs||[]).push([[2039],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Player Fragment Methods",l={unversionedId:"mobile-sdk/android-native-sdk/player-fragment-methods",id:"mobile-sdk/android-native-sdk/player-fragment-methods",title:"Player Fragment Methods",description:"The TpStreamPlayerFragment is a wrapper around TpStreamPlayerView that provides a comprehensive video streaming solution. This fragment supports auto-rotation, full-screen mode, secure screen protection, and forced software decoding, making it ideal for projects requiring advanced playback features, content security, and improved compatibility across devices.",source:"@site/docs/mobile-sdk/android-native-sdk/player-fragment-methods.md",sourceDirName:"mobile-sdk/android-native-sdk",slug:"/mobile-sdk/android-native-sdk/player-fragment-methods",permalink:"/docs/mobile-sdk/android-native-sdk/player-fragment-methods",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mobileSdk",previous:{title:"Offline Downloads",permalink:"/docs/mobile-sdk/android-native-sdk/offline-downloads"},next:{title:"iOS Native SDK",permalink:"/docs/category/ios-native-sdk"}},s={},c=[{value:"Enabling Auto Full-Screen on Device Rotation",id:"enabling-auto-full-screen-on-device-rotation",level:3},{value:"Entering Full-Screen Mode",id:"entering-full-screen-mode",level:3},{value:"Exiting Full-Screen Mode",id:"exiting-full-screen-mode",level:3},{value:"Setting Preferred Exit Orientation",id:"setting-preferred-exit-orientation",level:3},{value:"Using Software Decoder for Non-Standard Aspect Ratios",id:"using-software-decoder-for-non-standard-aspect-ratios",level:3},{value:"Enabling Secure View for Software-Decoded Content",id:"enabling-secure-view-for-software-decoded-content",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"player-fragment-methods"},"Player Fragment Methods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"TpStreamPlayerFragment")," is a wrapper around ",(0,a.kt)("inlineCode",{parentName:"p"},"TpStreamPlayerView")," that provides a comprehensive video streaming solution. This fragment supports auto-rotation, full-screen mode, secure screen protection, and forced software decoding, making it ideal for projects requiring advanced playback features, content security, and improved compatibility across devices."),(0,a.kt)("h3",{id:"enabling-auto-full-screen-on-device-rotation"},"Enabling Auto Full-Screen on Device Rotation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.enableAutoFullScreenOnRotate()\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"enableAutoFullScreenOnRotate()")," function automatically switches the player to full-screen mode when the device rotates to landscape orientation and exits full-screen mode when rotated back to portrait. This feature enhances the viewing experience by dynamically adapting the player to full-screen in landscape, providing a seamless transition during playback."),(0,a.kt)("h3",{id:"entering-full-screen-mode"},"Entering Full-Screen Mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.showFullScreen()\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"showFullScreen()")," function enables the player to enter full-screen mode programmatically, providing a fully immersive viewing experience. This method is useful in scenarios where full-screen playback is triggered by an action, such as a button tap or specific event. Calling showFullScreen() adjusts the player to occupy the entire screen, minimizing distractions and focusing solely on the video content."),(0,a.kt)("h3",{id:"exiting-full-screen-mode"},"Exiting Full-Screen Mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.exitFullScreen()\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"exitFullScreen()")," function allows the player to exit full-screen mode programmatically. This can be used when the app needs to return to a normal (non-full-screen) view under specific conditions, such as when navigating back or when an external event requires a smaller display area. Calling this method ensures that the player returns to its initial size and placement within the app\u2019s layout."),(0,a.kt)("h3",{id:"setting-preferred-exit-orientation"},"Setting Preferred Exit Orientation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.setPreferredFullscreenExitOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"setPreferredFullscreenExitOrientation()")," function allows you to set the preferred screen orientation for the player when exiting full-screen mode. For example, setting ",(0,a.kt)("inlineCode",{parentName:"p"},"ActivityInfo.SCREEN_ORIENTATION_PORTRAIT")," will ensure the screen reverts to portrait when full-screen mode is exited, providing a consistent viewing experience across different device orientations."),(0,a.kt)("h3",{id:"using-software-decoder-for-non-standard-aspect-ratios"},"Using Software Decoder for Non-Standard Aspect Ratios"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.useSoftwareDecoder()\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftwareDecoder()")," function forces the player to use a software decoder instead of a hardware decoder, particularly useful for videos with non-standard aspect ratios, like 9:16. This is especially beneficial on devices where hardware decoders are optimized for standard landscape formats (e.g., 16:9) but may struggle with portrait-oriented or unusually formatted videos."),(0,a.kt)("h3",{id:"enabling-secure-view-for-software-decoded-content"},"Enabling Secure View for Software-Decoded Content"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"playerFragment.enableSecureView()\n")),(0,a.kt)("p",null,"When using software decoding with ",(0,a.kt)("inlineCode",{parentName:"p"},"playerFragment.useSoftwareDecoder()"),", it\u2019s recommended to also enable ",(0,a.kt)("inlineCode",{parentName:"p"},"playerFragment.enableSecureView()")," to secure protected content during playback. Enabling ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftwareDecoder()")," forces the video to be decoded via a software codec, which may allow screen capture on some devices. ",(0,a.kt)("inlineCode",{parentName:"p"},"enableSecureView()")," prevents screen capture, offering enhanced security for DRM-protected content."))}p.isMDXComponent=!0}}]);